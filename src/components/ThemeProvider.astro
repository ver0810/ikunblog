{/* Inlined to avoid FOUC. This is a parser blocking script. */}
<script is:inline>
  const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

  function getUserPref() {
    const storedTheme =
      typeof localStorage !== "undefined" && localStorage.getItem("theme");
    return storedTheme || (lightModePref.matches ? "light" : "dark");
  }

  function setTheme(newTheme) {
    if (newTheme !== "light" && newTheme !== "dark") {
      return console.warn(
        `Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`
      );
    }

    const root = document.documentElement;

    // root already set to newTheme, exit early
    if (newTheme === root.getAttribute("data-theme")) {
      return;
    }

    root.setAttribute("data-theme", newTheme);

    // 设置类名 - 这是使 Tailwind dark: 前缀生效的关键
    if (newTheme === "dark") {
      root.classList.add("dark");
    } else {
      root.classList.remove("dark");
    }

    // 更新 meta 标签
    const colorThemeMetaTag = document.querySelector(
      "meta[name='theme-color']"
    );
    if (colorThemeMetaTag) {
      // 使用与 Tailwind 配置一致的颜色值
      const bgColor =
        newTheme === "dark"
          ? getComputedStyle(document.documentElement)
              .getPropertyValue("--ctm-base")
              .trim()
          : getComputedStyle(document.documentElement)
              .getPropertyValue("--ctp-base")
              .trim();

      // 直接设置颜色，不使用 hsl() 或 var()
      colorThemeMetaTag.setAttribute("content", bgColor);
    }
    if (typeof localStorage !== "undefined") {
      localStorage.setItem("theme", newTheme);
    }
  }

  // initial setup
  setTheme(getUserPref());

  // View Transitions hook to restore theme
  document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

  // listen for theme-change custom event, fired in src/components/ThemeToggle.astro
  document.addEventListener("theme-change", (e) => {
    setTheme(e.detail.theme);
  });

  // listen for prefers-color-scheme change.
  lightModePref.addEventListener("change", (e) =>
    setTheme(e.matches ? "light" : "dark")
  );
</script>
